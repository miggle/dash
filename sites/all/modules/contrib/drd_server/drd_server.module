<?php

/**
 * @file
 * Provides XMLRPC implementation to respond to requests from DRD.
 */

define('DRD_SERVER_API_VERSION', '2.2.0');

define('DRD_SERVER_ERROR_WRONG_API', 1001);
define('DRD_SERVER_ERROR_WRONG_REFERER', 1002);
define('DRD_SERVER_ERROR_NO_REFERER', 1003);
define('DRD_SERVER_ERROR_NO_OP', 1004);
define('DRD_SERVER_ERROR_NO_FUNC', 1005);
define('DRD_SERVER_ERROR_NO_LOG_PHP', 1006);
define('DRD_SERVER_ERROR_MISSING_AES', 1007);
define('DRD_SERVER_ERROR_WRONG_KEYS', 1999);

/** ======================================================================
 *
 * Hooks
 */

/**
 * Implementation of hook_xmlrpc().
 *
 * This function provides Drupal with an array to map XML-RPC callbacks to the
 * functions implemented by this module.
 *
 * @return array
 *   An array of key/value pairs where key is the operation name and value the corresponding function.
 */
function drd_server_xmlrpc() {
  include_once 'drd_server.domain.inc';
  include_once 'drd_server.server.inc';
  return array(
    'drd.key' => 'drd_server_key',
    'drd.execute' => 'drd_server_execute',
    'drd.heartbeat' => 'drd_server_heartbeat',
    'drd.config.server.read' => 'drd_server_config_server_read',
    'drd.config.server.save' => 'drd_server_config_server_save',
    'drd.config.domain.read' => 'drd_server_config_domain_read',
    'drd.config.domain.save' => 'drd_server_config_domain_save',
    'drd.retrieve.blocks' => 'drd_server_render_blocks',
  );
}

/**
 * Implements hook_drd_server_operations().
 *
 * @return array
 *   An array of keyed operation definitions.
 */
function drd_server_drd_server_operations() {
  return array(
    'drd.server.install' => array(
      'category' => t('Domain'),
      'label' => t('DRD: remotely install/uninstall'),
      'callback' => 'drd_install_drd_server',
      'mode' => 'domain',
      'remote' => FALSE,
      'queue' => TRUE,
      'fields' => array(
        'attention' => array(
          '#markup' => t('ATTENTION: This will flush all caches on your remote site, so please be aware and use this with care, especially if you have a lot of traffic on your remote site.'),
        ),
        'reset' => array(
          '#type' => 'checkbox',
          '#title' => t('Install'),
          '#default_value' => TRUE,
        ),
      ),
    ),
    'drd.server.domains' => array(
      'category' => t('Server'),
      'label' => t('Update server domains'),
      'callback' => 'drd_server_server_domains',
      'mode' => 'server',
      'remote' => TRUE,
      'queue' => TRUE,
      'follower' => array(
        'a' => 'drd.operations',
      ),
    ),
    'drd.info' => array(
      'label' => t('Update info'),
      'callback' => 'drd_server_domain_info',
      'mode' => 'domain',
      'remote' => TRUE,
      'queue' => TRUE,
      'refresh' => TRUE,
    ),
    'drd.cache.flush' => array(
      'label' => t('Flush Cache'),
      'callback' => 'drd_server_domain_flush_cache',
      'mode' => 'domain',
      'remote' => TRUE,
      'queue' => TRUE,
    ),
    'drd.run.cron' => array(
      'label' => t('Run Cron'),
      'callback' => 'drd_server_domain_run_cron',
      'mode' => 'domain',
      'remote' => TRUE,
      'queue' => TRUE,
      'follower' => array(
        'a' => 'drd.info',
      ),
    ),
    'drd.switch.maintenance' => array(
      'label' => t('Maintenance Mode'),
      'callback' => 'drd_server_domain_switch_maintenance',
      'mode' => 'domain',
      'remote' => TRUE,
      'queue' => TRUE,
      'fields' => array(
        'maintenancemode' => array(
          '#type' => 'checkbox',
          '#title' => t('On'),
          '#default_value' => TRUE,
        ),
      ),
    ),
    'drd.list.updates' => array(
      'label' => t('List new modules and themes'),
      'callback' => 'drd_server_domain_list_updates',
      'mode' => 'domain',
      'remote' => TRUE,
      'queue' => TRUE,
      'follower' => array(
        'a' => 'drd.info',
      ),
    ),
    'drd.server.list.updates' => array(
      'label' => t('List new modules and themes (including disabled)'),
      'callback' => 'drd_server_server_list_updates',
      'mode' => 'server',
      'remote' => TRUE,
      'queue' => TRUE,
    ),
    'drd.run.update' => array(
      'label' => t('Run Database Updates'),
      'callback' => 'drd_server_domain_run_update',
      'mode' => 'domain',
      'remote' => TRUE,
      'queue' => TRUE,
      'follower' => array(
        'a' => 'drd.info',
      ),
    ),
    'drd.update.translation' => array(
      'label' => t('Update Translations'),
      'callback' => 'drd_server_domain_update_translation',
      'mode' => 'domain',
      'remote' => TRUE,
      'queue' => TRUE,
      'follower' => array(
        'a' => 'drd.info',
      ),
    ),
    'drd.server.php.error.log' => array(
      'category' => t('Server'),
      'label' => t('PHP Error Log'),
      'callback' => 'drd_server_server_php_error_log',
      'mode' => 'server',
      'remote' => TRUE,
      'queue' => TRUE,
    ),
    'drd.set.user1' => array(
      'label' => t('Reset User 1 Credentials'),
      'callback' => 'drd_server_domain_reset_user1',
      'mode' => 'domain',
      'remote' => TRUE,
      'queue' => FALSE,
      'fields' => array(
        'username' => array(
          '#type' => 'textfield',
          '#title' => t('Username'),
          '#default_value' => '',
        ),
        'userpass' => array(
          '#type' => 'password',
          '#title' => t('Password'),
          '#default_value' => '',
        ),
        'userpassrepeat' => array(
          '#type' => 'password',
          '#title' => t('Repeat password'),
          '#default_value' => '',
        ),
      ),
    ),
    'drd.php' => array(
      'label' => t('Execute PHP code'),
      'callback' => 'drd_server_domain_php',
      'mode' => 'domain',
      'remote' => TRUE,
      'queue' => TRUE,
      'fields' => array(
        'php' => array(
          '#type' => 'textarea',
          '#title' => t('PHP-Code'),
          '#default_value' => '',
          '#description' => t('The PHP code to be executed, wrapped in php tags. Note: The PHP module needs to be enabled on the remote domain.'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 *
 * @return array
 *   An array of all blocks defined by drd_server.
 */
function drd_server_block_info() {
  $blocks = array();
  if (module_exists('admin')) {
    $blocks['drd'] = array(
      'info' => t('Admin Extras Dashboard'),
      'cache' => DRUPAL_CACHE_PER_ROLE,
      'admin' => TRUE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 *   The string defining the block that should be received.
 *
 * @return mixed
 *   Either a renderable array for the block referenced by delta or FALSE if that block is either empty or the current
 *   user has no permission to access that block.
 */
function drd_server_block_view($delta) {
  switch ($delta) {
    case 'drd':
      module_load_include('inc', 'drd_server', 'drd_server.admin');
      return drd_server_admin_block();
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 *
 * @return array
 *   An array of defined permissions by this module.
 */
function drd_server_permission() {
  return array(
    'flush cache' => array(
      'title' => t('Flush Cache'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * @return array
 *   An array of all defined menu items by this module.
 */
function drd_server_menu() {
  $items['admin/drd_server/%'] = array(
    'title' => 'Check if DRD Server is installed',
    'page callback' => 'drd_server_check',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/system/drd_settings'] = array(
    'title' => 'DRD Remote Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drd_server_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'drd_server.admin.inc',
  );
  $items['admin/drd_server/flush/cache'] = array(
    'title' => 'Flush Cache',
    'page callback' => 'drd_server_domain_flush_cache',
    'page arguments' => array(TRUE),
    'access arguments' => array('flush cache'),
    'file' => 'drd_server.domain.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/drd_server/update/translation'] = array(
    'title' => 'Update translation',
    'page callback' => 'drd_server_admin_update_translation',
    'access arguments' => array('translate interface'),
    'file' => 'drd_server.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_drd_config_domain().
 *
 * @return array
 *   Form definition for domain settings.
 */
function drd_server_drd_config_domain() {
  $form = array();

  $block_list = array();
  foreach (module_implements('block_info') as $module) {
    foreach (module_invoke($module, 'block_info') as $key => $block) {
      $block_list[$module . ':' . $key] = $block['info'];
    }
  }
  $form['drd_server_blocks'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Blocks to display',
    '#options' => $block_list,
    '#default_value' => variable_get('drd_server_blocks', array()),
  );
  return $form;
}

/** ======================================================================
 *
 * Remote client functions
 */

/**
 * This is called to update the excryption keys for this server and all it's
 * domains hosted in the same Drupal installation.
 *
 * @param string $api
 *   The API used by DRD, is used to make sure that APIs from DRD and DRD_Server are compatible.
 * @param int $timestamp
 *   Not used yet. Could be used to make sure that the request is not too old - to avoid hacking attacks. However,
 *   security by AES is sufficient and as timestamp is going to change for each valid request from DRD, the encrypted
 *   request will change as well all the time, so that a brute force attack is very unlikely.
 * @param string $langcode
 *   Language used by the current user in DRD so that messages from here can be properly localized.
 * @param boolean $debug
 *   TRUE if DRD is in debug mode so that more verbose messages get generated.
 * @param string $domainurl
 *   The domain name for which AES keys should be set.
 * @param string $aes_key
 *   The AES key to be set.
 * @param string $aes_cipher
 *   The AES Cipher to be set.
 * @param string $aes_iv
 *   The AES Initial Vector to be set.
 * @param string $aes_impl
 *   The AES Implementation to be set.
 *
 * @return string
 *   The result string to be sent back to DRD.
 */
function drd_server_key($api, $timestamp, $langcode, $debug, $domainurl, $aes_key = '', $aes_cipher = '', $aes_iv = '', $aes_impl = '') {
  if ($timestamp != REQUEST_TIME) {
    // We could verify that the request is current.
  }
  global $language;
  $language->language = $langcode;
  _drd_server_watchdog($debug, 'DRD', 'AES key change request.');
  $allowed = variable_get('drd_allowed_referer', '');
  $referer = ip_address();
  if (empty($allowed)) {
    return drd_server_error(t('Referer (%referer) not allowed, nothing configured yet.', array('%referer' => $referer)), DRD_SERVER_ERROR_NO_REFERER);
  }
  if (strpos($allowed, $referer) === FALSE) {
    _drd_server_watchdog($debug, 'DRD', 'AES key change request unauthorized.', array(), WATCHDOG_ALERT);
    return drd_server_error(t('Referer (%referer) not allowed.', array('%referer' => $referer)), DRD_SERVER_ERROR_WRONG_REFERER);
  }
  if ($api !== DRD_SERVER_API_VERSION) {
    _drd_server_watchdog($debug, 'DRD', 'Wrong API: %api.', array('%api' => $api), WATCHDOG_ALERT);
    return drd_server_error(t('Wrong API.'), DRD_SERVER_ERROR_WRONG_API);
  }
  $sites = drd_server_read_sites();
  $aes_keys = variable_get('drd_aes_keys', array());
  if (empty($domainurl)) {
    $aes_keys[$referer] = array(
      'key' => $aes_key,
      'cipher' => $aes_cipher,
      'iv' => $aes_iv,
      'impl' => $aes_impl,
    );
    variable_set('drd_aes_keys', $aes_keys);
    $domainurls = $sites;
  }
  else {
    $domainurls = array($domainurl => $sites[$domainurl]);
  }
  drd_server_key_remote($domainurls, $aes_keys);
  return drd_server_result('drd.key', TRUE);
}

/**
 * This is called to execute one of the operations that are defined on one of the hook_drd_server_operations().
 *
 * @param string $op
 *   The operation defined by hook_drd_server_operations() that should be executed.
 * @param string $api
 *   The API used by DRD, is used to make sure that APIs from DRD and DRD_Server are compatible.
 * @param int $timestamp
 *   Unix timestamp to identify when the request has beensent by DRD.
 * @param string $langcode
 *   Language used by the current user in DRD so that messages from here can be properly localized.
 * @param boolean $debug
 *   TRUE if DRD is in debug mode so that more verbose messages get generated.
 *
 * @return string
 *   The result string to be sent back to DRD.
 */
function drd_server_execute($op, $api, $timestamp, $langcode, $debug) {
  $args = func_get_args();
  $op = array_shift($args);
  list($valid) = _drd_server_validate_request($args, $op);
  if ($valid !== TRUE) {
    return $valid;
  }
  $op = array_pop($args);

  $operations = module_invoke_all('drd_server_operations');
  if ($op == 'drd.operations') {
    return drd_server_result('drd.operations', $operations);
  }
  if (!isset($operations[$op])) {
    return drd_server_error(t('Operation %op does not exist.', array('%op' => $op)), DRD_SERVER_ERROR_NO_OP);
  }
  $operation = $operations[$op];
  if (!function_exists($operation['callback'])) {
    return drd_server_error(t('Operation %op does not have any callback.', array('%op' => $op)), DRD_SERVER_ERROR_NO_FUNC);
  }
  return call_user_func_array($operation['callback'], $args);
}

/**
 * Callback to retrieve lots of current runtime data form the domain.
 *
 * @param string $api
 *   The API used by DRD, is used to make sure that APIs from DRD and DRD_Server are compatible.
 * @param int $timestamp
 *   Unix timestamp to identify when the request has beensent by DRD.
 * @param string $langcode
 *   Language used by the current user in DRD so that messages from here can be properly localized.
 * @param boolean $debug
 *   TRUE if DRD is in debug mode so that more verbose messages get generated.
 * @param int $period
 *   Period of time in seconds for which the data should be received. If zero, all data will be returned.
 *
 * @return string
 *   The result string to be sent back to DRD.
 */
function drd_server_heartbeat($api, $timestamp, $langcode, $debug, $period = 0) {
  $args = func_get_args();
  list($valid, $api, $timestamp, $langcode, $debug) = _drd_server_validate_request($args);
  if ($valid !== TRUE) {
    return $valid;
  }
  $period = array_shift($args);

  // Session count is "borrowed" from the admin_menu module, credit to their maintainers.
  $interval   = REQUEST_TIME - variable_get('user_block_seconds_online', 900);
  $heartbeat = array(
    'count' => array(
      'user' => array(
        'all' => _drd_server_count('users', 'uid'),
        'sessions' => _drd_server_count_session($interval, TRUE),
        'auth' => _drd_server_count_session($interval, FALSE),
      ),
      'content' => array(
        'node' => _drd_server_count('node', 'nid'),
        'comment' => _drd_server_count('comment', 'cid'),
      ),
    ),
    'file' => array(
      'temp' => _drd_server_count_file(0),
      'perm' => _drd_server_count_file(1),
    ),
    'watchdog' => array(
      'emergency' => _drd_server_count_watchdog(WATCHDOG_EMERGENCY, $period),
      'alert' => _drd_server_count_watchdog(WATCHDOG_ALERT, $period),
      'critical' => _drd_server_count_watchdog(WATCHDOG_CRITICAL, $period),
      'error' => _drd_server_count_watchdog(WATCHDOG_ERROR, $period),
      'warning' => _drd_server_count_watchdog(WATCHDOG_WARNING, $period),
      'notice' => _drd_server_count_watchdog(WATCHDOG_NOTICE, $period),
      'info' => _drd_server_count_watchdog(WATCHDOG_INFO, $period),
      'debug' => _drd_server_count_watchdog(WATCHDOG_DEBUG, $period),
    ),
  );
  $heartbeat['detail'] = array(
    'user' => array(
      'title' => t('User'),
      'content' => array(
        format_plural($heartbeat['count']['user']['auth'], '@count authenticated user', '@count authenticated users'),
        format_plural($heartbeat['count']['user']['sessions'], '@count user session', '@count user sessions'),
        format_plural($heartbeat['count']['user']['all'], '@count registered user', '@count registered users'),
      ),
    ),
    'content' => array(
      'title' => t('Content'),
      'content' => array(
        format_plural($heartbeat['count']['content']['node'], '@count node', '@count nodes'),
        format_plural($heartbeat['count']['content']['comment'], '@count comment', '@count comments'),
      ),
    ),
    'file' => array(
      'title' => t('Files'),
      'content' => array(
        format_plural($heartbeat['file']['temp']['count'], '@count temporary file with %size', '@count temporary files with %size', array('%size' => format_size($heartbeat['file']['temp']['size']))),
        format_plural($heartbeat['file']['perm']['count'], '@count permanent file with %size', '@count permanent files with %size', array('%size' => format_size($heartbeat['file']['perm']['size']))),
      ),
    ),
    'watchdog' => array(
      'title' => t('Watchdog'),
      'content' => array(),
    ),
  );
  foreach ($heartbeat['watchdog'] as $key => $value) {
    $heartbeat['detail']['watchdog']['content'][$key] = format_plural($value, '@count %severity entry', '@count %severity entries', array('%severity' => $key));
  }
  drupal_alter('drd_server_heartbeat', $heartbeat);
  return drd_server_result('drd.heartbeat', $heartbeat);
}

function drd_server_render_blocks($api, $timestamp, $langcode, $debug) {
  $args = func_get_args();
  list($valid, $api, $timestamp, $langcode, $debug) = _drd_server_validate_request($args);
  if ($valid !== TRUE) {
    return $valid;
  }
  $result = '';
  foreach (variable_get('drd_server_blocks', array()) as $def) {
    if ($def) {
      list($module, $delta) = explode(':', $def);
      $block = block_load($module, $delta);
      $block_content = _block_render_blocks(array($block));
      $build = _block_get_renderable_array($block_content);
      $result .= drupal_render($build);
    }
  }
  return drd_server_result('drd.render.blocks', $result);
}

/**
 * Callback to retrieve a (sub-)form for Core configuration.
 *
 * @param string $api
 *   The API used by DRD, is used to make sure that APIs from DRD and DRD_Server are compatible.
 * @param int $timestamp
 *   Unix timestamp to identify when the request has beensent by DRD.
 * @param string $langcode
 *   Language used by the current user in DRD so that messages from here can be properly localized.
 * @param boolean $debug
 *   TRUE if DRD is in debug mode so that more verbose messages get generated.
 *
 * @return string
 *   The result string to be sent back to DRD.
 */
function drd_server_config_server_read($api, $timestamp, $langcode, $debug) {
  $args = func_get_args();
  list($valid, $api, $timestamp, $langcode, $debug) = _drd_server_validate_request($args);
  if ($valid !== TRUE) {
    return $valid;
  }

  $form = module_invoke_all('drd_config_server');
  return drd_server_result('drd.config.read.server', $form);
}

/**
 * Callback to save Core configuration.
 *
 * @param string $api
 *   The API used by DRD, is used to make sure that APIs from DRD and DRD_Server are compatible.
 * @param int $timestamp
 *   Unix timestamp to identify when the request has beensent by DRD.
 * @param string $langcode
 *   Language used by the current user in DRD so that messages from here can be properly localized.
 * @param boolean $debug
 *   TRUE if DRD is in debug mode so that more verbose messages get generated.
 * @param array $values
 *   The values to be saved.
 *
 * @return string
 *   The result string to be sent back to DRD.
 */
function drd_server_config_server_save($api, $timestamp, $langcode, $debug, $values) {
  $args = func_get_args();
  list($valid, $api, $timestamp, $langcode, $debug) = _drd_server_validate_request($args);
  if ($valid !== TRUE) {
    return $valid;
  }
  $values = drupal_json_decode(array_shift($args));

  $form = module_invoke_all('drd_config_server');
  return drd_server_config_save($form, $values);
}

/**
 * Callback to retrieve a (sub-)form for Domain configuration.
 *
 * @param string $api
 *   The API used by DRD, is used to make sure that APIs from DRD and DRD_Server are compatible.
 * @param int $timestamp
 *   Unix timestamp to identify when the request has beensent by DRD.
 * @param string $langcode
 *   Language used by the current user in DRD so that messages from here can be properly localized.
 * @param boolean $debug
 *   TRUE if DRD is in debug mode so that more verbose messages get generated.
 *
 * @return string
 *   The result string to be sent back to DRD.
 */
function drd_server_config_domain_read($api, $timestamp, $langcode, $debug) {
  $args = func_get_args();
  list($valid, $api, $timestamp, $langcode, $debug) = _drd_server_validate_request($args);
  if ($valid !== TRUE) {
    return $valid;
  }

  $form = module_invoke_all('drd_config_domain');
  return drd_server_result('drd.config.read.domain', $form);
}

/**
 * Callback to save Domain configuration.
 *
 * @param string $api
 *   The API used by DRD, is used to make sure that APIs from DRD and DRD_Server are compatible.
 * @param int $timestamp
 *   Unix timestamp to identify when the request has beensent by DRD.
 * @param string $langcode
 *   Language used by the current user in DRD so that messages from here can be properly localized.
 * @param boolean $debug
 *   TRUE if DRD is in debug mode so that more verbose messages get generated.
 * @param array $values
 *   The values to be saved.
 *
 * @return string
 *   The result string to be sent back to DRD.
 */
function drd_server_config_domain_save($api, $timestamp, $langcode, $debug, $values) {
  $args = func_get_args();
  list($valid, $api, $timestamp, $langcode, $debug) = _drd_server_validate_request($args);
  if ($valid !== TRUE) {
    return $valid;
  }
  $values = drupal_json_decode(array_shift($args));

  $form = module_invoke_all('drd_config_domain');
  return drd_server_config_save($form, $values);
}

/**
 * Callback to save form values, either for Core or Domain.
 *
 * @param array $form
 *   Form definition for which the values should be stored.
 * @param array $values
 *   The values to be saved.
 * @param bool $return
 *   Whether to return the result string to be sent back to DRD.
 *
 * @return string
 *   The result string to be sent back to DRD.
 */
function drd_server_config_save($form, $values, $return = TRUE) {
  foreach ($form as $key => $element) {
    if (is_array($element) && (substr($key, 0, 1) != '#')) {
      drd_server_config_save($element, $values, FALSE);
    }
    if (!empty($values[$key])) {
      variable_set($key, $values[$key]);
    }
  }
  if ($return) {
    return drd_server_result('drd.config.save', TRUE);
  }
  return '';
}

/** ======================================================================
 *
 * Helper functions
 */

/**
 * This is called to update encryption keys on all domains.
 *
 * @param array $domainurls
 *   An array of domain names as string for which the AES keys should be set.
 * @param array $aes_keys
 *   The array of AES keys for the given domains.
 */
function drd_server_key_remote($domainurls, $aes_keys) {
  $done = array();
  foreach ($domainurls as $url => $shortname) {
    if (in_array($shortname, $done)) {
      continue;
    }
    $done[] = $shortname;
    $databases = NULL;
    $file = DRUPAL_ROOT . '/sites/' . $shortname . '/settings.php';
    if (file_exists($file)) {
      include $file;
      if (!empty($databases['default']['default'])) {
        try {
          $shortname = 'drd' . $shortname;
          Database::addConnectionInfo($shortname, $shortname, $databases['default']['default']);
          $db = Database::getConnection($shortname, $shortname);
          $db->merge('variable')->key(array('name' => 'drd_aes_keys'))->fields(array('value' => serialize($aes_keys)))->execute();
          $db->query("DELETE FROM {cache_bootstrap} WHERE cid='variables'");
          Database::closeConnection($shortname, $shortname);
        }
        catch (Exception $ex) {
          watchdog_exception('drd error', $ex, 'Tried updating key for %shortname', array('%shortname' => $shortname));
        }
      }
    }
  }
}

/**
 * Determines all available sites/domains in the current Drupal installation.
 *
 * @return array
 *   An array with key/value pairs where key is the domain name and value the shortname of a directory in
 *   DRUPAL_ROOT/sites/ for where to find the settings.php file for that domain.
 */
function drd_server_read_sites() {
  $sites = array();
  if (file_exists(DRUPAL_ROOT . '/sites/sites.php')) {
    try {
      include DRUPAL_ROOT . '/sites/sites.php';
    }
    catch (Exception $e) {
      // Ignore.
    }
  }
  else {
    foreach (scandir(DRUPAL_ROOT . '/sites') as $shortname) {
      if (is_dir(DRUPAL_ROOT . '/sites/' . $shortname) &&
          !in_array($shortname, array('.', '..', 'all'))) {
        $file = DRUPAL_ROOT . '/sites/' . $shortname . '/settings.php';
        if (file_exists($file)) {
          $base_url = $shortname;
          try {
            include $file;
          }
          catch (Exception $e) {
            // Ignore.
          }
          $pos = strpos($base_url, '://');
          if ($pos > 0) {
            $base_url = substr($base_url, $pos + 3);
          }
          $sites[$base_url] = $shortname;
        }
      }
    }
  }
  return $sites;
}

/**
 * Get the AES encryption values for the remote DRD dashboard, identified by their IP address.
 *
 * @return array
 *   An array of the AES encryption values for the given referer.
 */
function drd_server_aes() {
  $referer = ip_address();
  $aes_keys = variable_get('drd_aes_keys', array());
  if (empty($aes_keys[$referer])) {
    return FALSE;
  }
  return $aes_keys[$referer];
}

/**
 * Prepare the result for returning it to the XMLRPC caller.
 *
 * @param string $mode
 *   The function that was called by the XMLRPC caller.
 * @param string $drd_result
 *   The result from the drd_server functions to be returned after hooks and alterers have been called.
 *
 * @return string
 *   Returns the final result to be sent to the XMLRPC caller.
 */
function drd_server_result($mode, $drd_result) {
  $args = func_get_args();
  $mode = array_shift($args);
  $drd_result = array_shift($args);
  foreach (module_implements('drd_server') as $module) {
    $drd_result = module_invoke($module, 'drd_server', $mode, $drd_result, $args);
  }
  drupal_alter('drd_server', $mode, $drd_result);
  $result = new stdClass();
  $result->message = $drd_result;
  $result->messages = drupal_get_messages();
  return drd_server_output($result);
}

/**
 * Prepare an error message for returning to the XMLRPC caller.
 *
 * @param mixed $message
 *   The message to be sent to the XMLRPC caller.
 * @param int $code
 *   An optional error code which determines whether the result can be encrypted before it's returned to DRD.
 *
 * @return string
 *   Returns the encoded message.
 */
function drd_server_error($message, $code = 1) {
  if (is_object($message)) {
    $message = (array) $message;
  }
  if (is_array($message)) {
    $message = implode(' ', $message);
  }
  $encrypt = !in_array($code,
    array(
      DRD_SERVER_ERROR_WRONG_REFERER,
      DRD_SERVER_ERROR_NO_REFERER,
      DRD_SERVER_ERROR_MISSING_AES,
      DRD_SERVER_ERROR_WRONG_KEYS
    )
  );
  return drd_server_output(xmlrpc_error($code, strip_tags($message)), $encrypt);
}

/**
 * Prepare the output to be sent back to the DRD dashboard. This preparation
 * json encodes the output and then encrypts the resulting string if encryption
 * is available.
 *
 * @param mixed $output
 *   The output that should be returned to DRD and that needs to be prepared here.
 * @param boolean $encrypt
 *   TRUE, if the result should be encrypted.
 *
 * @return string
 *   The prepared string ready to be sent back to DRD.
 */
function drd_server_output($output, $encrypt = TRUE) {
  if (!empty($output)) {
    $output = drupal_json_encode($output);
    if ($encrypt) {
      $aes = drd_server_aes();
      if (!empty($aes)) {
        $output = aes_encrypt($output, TRUE, $aes['key'], $aes['cipher'], $aes['iv'], $aes['impl']);
      }
    }
  }
  return $output;
}

/**
 * Callback for the url 'admin/drd_server/%' to find out if a proper result is
 * returned which indicates whether drd_server is installed on a certain domain
 * or not.
 *
 * @param int $var
 *   A values to be used checking if this domain is installed and reachable.
 */
function drd_server_check($var) {
  print($var / 2);
  exit;
}

/**
 * Internal watchdog replacement which only reports to watchdog if debugging
 * is switched on by the remote DRD dashboard.
 *
 * @param boolean $debug
 *   TRUE if DRD is running in debug mode, then we are reporting things to watchdog.
 * @param string $type
 *   Type of watchdog report.
 * @param string $message
 *   Message of the watchdog report.
 * @param array $variables
 *   Parameters for the watchdog report.
 * @param int $severity
 *   Severity of the watchdog report.
 * @param string $link
 *   Optional link associated with the watchdog report.
 */
function _drd_server_watchdog($debug, $type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL) {
  if ($debug) {
    watchdog($type, $message, $variables, $severity, $link);
  }
}

/**
 * Callback to validate a request that's coming from DRD.
 *
 * @param array $args
 *   An array of all arguments being submitted by DRD.
 * @param string $op
 *   If the callback from DRD is about to execute an operation, this parameter determines the opration name.
 *
 * @return array
 *   If the request is valid, the array contains all unencrypted arguments where the first argument is TRUE.
 *   Otherwise the array just contains a string that represents a prepared return message to DRD containing
 *   an error message.
 */
function _drd_server_validate_request(&$args, $op = '') {
  $langcode = $args[2];
  $debug = $args[3];

  global $language;
  $language->language = $langcode;

  _drd_server_watchdog($debug, 'DRD', 'Remote execution request.');

  if (!module_exists('aes')) {
    _drd_server_watchdog($debug, 'DRD', 'Modules AES missing.', array(), WATCHDOG_ALERT);
    return array(drd_server_error(t('Module AES is missing.'), DRD_SERVER_ERROR_MISSING_AES), FALSE, FALSE, FALSE, FALSE);
  }

  $aes = drd_server_aes();
  if (empty($aes)) {
    _drd_server_watchdog($debug, 'DRD', 'Execution request unauthorized.', array(), WATCHDOG_ALERT);
    return array(
      drd_server_error(t('Referer (%ip) not allowed.', array('%ip' => ip_address())), DRD_SERVER_ERROR_WRONG_REFERER), FALSE, FALSE, FALSE, FALSE
    );
  }

  array_push($args, $op);
  foreach ($args as $i => $value) {
    if (!empty($value) && !in_array($i, array(2, 3))) {
      $args[$i] = aes_decrypt($value, TRUE, $aes['key'], $aes['cipher'], $aes['iv'], $aes['impl']);
    }
  }

  $api = array_shift($args);
  $timestamp = array_shift($args);
  $langcode = array_shift($args);
  $debug = array_shift($args);

  if (!_drd_server_validate_timestamp($timestamp)) {
    _drd_server_watchdog($debug, 'DRD', 'Wrong encryption keys.', array(), WATCHDOG_EMERGENCY);
    return array(drd_server_error(t('Wrong encryption keys.'), DRD_SERVER_ERROR_WRONG_KEYS), FALSE, FALSE, FALSE, FALSE);
  }
  if ($api !== DRD_SERVER_API_VERSION) {
    _drd_server_watchdog($debug, 'DRD', 'Wrong API: %api.', array('%api' => $api), WATCHDOG_ALERT);
    return array(drd_server_error(t('Wrong API.'), DRD_SERVER_ERROR_WRONG_API), FALSE, FALSE, FALSE, FALSE);
  }

  return array(TRUE, $api, $timestamp, $langcode, $debug);
}

/**
 * Callback to validate if $timestamp contains numbers only.
 *
 * @param int $timestamp
 *   The timestamp to be checked.
 *
 * @return boolean
 *   TRUE if $timestamp only contains digits, FALSE otherwise.
 */
function _drd_server_validate_timestamp($timestamp) {
  for ($i = 0; $i < strlen($timestamp); $i++) {
    if (strpos('0123456789', $timestamp[$i]) === FALSE) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Callback to count the number of records in a given database table.
 *
 * @param string $table
 *   The name of the database table from which the number of records should be counted.
 * @param string $primary
 *   The name of the primary keys in that database table.
 *
 * @return int
 *   The number of records being available.
 */
function _drd_server_count($table, $primary) {
  if (db_table_exists($table)) {
    $query = db_select($table);
    $query->addExpression('COUNT(' . $primary . ')', 'count');
    return $query->execute()->fetchField();
  }
  return 0;
}

/**
 * Callback to count number of sessions in a given period for either anonymous or authenticated users.
 *
 * @param int $timestamp
 *   A Unix timestamp for the starting time from which the number of sessions should be counted until now.
 * @param boolean $anonymous
 *   If TRUE, only sessions for anonymous users will be counted, otherwise only sessions for authenticated
 *   user sessions will be counted.
 *
 * @return int
 *   The number of sessions being found.
 */
function _drd_server_count_session($timestamp = 0, $anonymous = TRUE) {
  $query = db_select('sessions');
  $query->addExpression('COUNT(sid)', 'count');
  $query->condition('timestamp', $timestamp, '>=');
  $query->condition('uid', 0, $anonymous ? '=' : '>');
  return $query->execute()->fetchField();
}

/**
 * Callback to determine the number of managed files and their size.
 *
 * @param boolean $status
 *   If TRUE, only permanent files get considered, otherwise only temporary files.
 *
 * @return array
 *   Associated array with a key 'count' containing the number of files and 'size' containing the size in bytes of
 *   all those files together.
 */
function _drd_server_count_file($status) {
  $count_query = db_select('file_managed');
  $count_query->addExpression('COUNT(fid)', 'count');
  $count = $count_query->condition('status', $status)->execute()->fetchField();
  $size_query = db_select('file_managed');
  $size_query->addExpression('SUM(filesize)', 'size');
  $size = $size_query->condition('status', $status)->execute()->fetchField();
  return array(
    'count' => $count,
    'size' => $size,
  );
}

/**
 * Callback to count the number of watchdog entries of a given severity in a given period of time.
 *
 * @param string $severity
 *   The severity of records to be counted.
 * @param int $period
 *   The period in seconds in the past relative to now for which the records should be counted.
 *
 * @return int
 *   The number of records being available.
 */
function _drd_server_count_watchdog($severity, $period) {
  if (!module_exists('dblog')) {
    return 0;
  }
  $query = db_select('watchdog');
  $query->addExpression('COUNT(wid)', 'count');
  $query->condition('severity', $severity);
  if ($period) {
    $query->condition('timestamp', (REQUEST_TIME - $period), '>=');
  }
  return $query->execute()->fetchField();
}
